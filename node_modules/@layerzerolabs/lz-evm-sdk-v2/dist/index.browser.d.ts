export { ak as AddressCast, al as AddressCast__factory, ck as AddressSizeConfig, cl as AddressSizeConfig__factory, bq as ArbitrumDVNAdapterL1, br as ArbitrumDVNAdapterL1__factory, bs as ArbitrumDVNAdapterL2, bt as ArbitrumDVNAdapterL2__factory, bu as AxelarDVNAdapter, by as AxelarDVNAdapterFeeLib, bz as AxelarDVNAdapterFeeLib__factory, bv as AxelarDVNAdapter__factory, aq as BlockedMessageLib, ar as BlockedMessageLib__factory, bA as CCIPDVNAdapter, bC as CCIPDVNAdapterFeeLib, bD as CCIPDVNAdapterFeeLib__factory, bB as CCIPDVNAdapter__factory, C as ComposeSentEvent, bO as DVN, bE as DVNAdapterBase, bF as DVNAdapterBase__factory, bI as DVNAdapterMessageCodec, bJ as DVNAdapterMessageCodec__factory, z as DVNDecompressor, A as DVNDecompressor__factory, bQ as DVNFeeLib, bR as DVNFeeLib__factory, c8 as DVNOptions, c9 as DVNOptions__factory, bP as DVN__factory, D as DecompressorExtension, y as DecompressorExtension__factory, E as EndpointV2, m as EndpointV2Alt, H as EndpointV2Alt__factory, n as EndpointV2View, o as EndpointV2ViewUpgradeable, J as EndpointV2ViewUpgradeable__factory, I as EndpointV2View__factory, G as EndpointV2__factory, am as Errors, an as Errors__factory, p as Executor, B as ExecutorDecompressor, F as ExecutorDecompressor__factory, q as ExecutorFeeLib, L as ExecutorFeeLib__factory, as as ExecutorOptions, at as ExecutorOptions__factory, K as Executor__factory, d5 as GetARGsTypeFromFactory, d4 as GetContractTypeFromFactory, bU as IAxelarDVNAdapter, bW as IAxelarDVNAdapterFeeLib, bX as IAxelarDVNAdapterFeeLib__factory, bV as IAxelarDVNAdapter__factory, bY as ICCIPDVNAdapter, b_ as ICCIPDVNAdapterFeeLib, b$ as ICCIPDVNAdapterFeeLib__factory, bZ as ICCIPDVNAdapter__factory, c0 as IDVN, c2 as IDVNFeeLib, c3 as IDVNFeeLib__factory, c1 as IDVN__factory, N as IExecutor, Q as IExecutorFeeLib, U as IExecutorFeeLib__factory, O as IExecutor__factory, V as ILayerZeroComposer, X as ILayerZeroComposer__factory, c4 as ILayerZeroDVN, c5 as ILayerZeroDVN__factory, Y as ILayerZeroEndpointV2, Z as ILayerZeroEndpointV2__factory, _ as ILayerZeroExecutor, $ as ILayerZeroExecutor__factory, a0 as ILayerZeroPriceFeed, a1 as ILayerZeroPriceFeed__factory, cw as ILayerZeroReceiveLibrary, cx as ILayerZeroReceiveLibrary__factory, a2 as ILayerZeroReceiver, a3 as ILayerZeroReceiver__factory, a4 as ILayerZeroTreasury, a5 as ILayerZeroTreasury__factory, a6 as IMessageLib, cm as IMessageLibE1, cn as IMessageLibE1__factory, a8 as IMessageLibManager, a9 as IMessageLibManager__factory, a7 as IMessageLib__factory, aa as IMessagingChannel, ab as IMessagingChannel__factory, ac as IMessagingComposer, ad as IMessagingComposer__factory, ae as IMessagingContext, af as IMessagingContext__factory, co as INonceContract, cp as INonceContract__factory, aH as IOAppComposer, aI as IOAppComposer__factory, aJ as IOAppCore, aK as IOAppCore__factory, aL as IOAppMsgInspector, aM as IOAppMsgInspector__factory, aN as IOAppOptionsType3, aO as IOAppOptionsType3__factory, bb as IOAppPreCrimeSimulator, bc as IOAppPreCrimeSimulator__factory, aP as IOAppReceiver, aQ as IOAppReceiver__factory, b1 as IOFT, b2 as IOFT__factory, bd as IPreCrime, be as IPreCrime__factory, bG as IReceiveUln, cC as IReceiveUln301, cD as IReceiveUln301__factory, cO as IReceiveUln302, cP as IReceiveUln302__factory, c6 as IReceiveUlnE2, c7 as IReceiveUlnE2__factory, cc as IReceiveUlnView, cd as IReceiveUlnView__factory, bH as IReceiveUln__factory, ag as ISendLib, bw as ISendLibBase, bx as ISendLibBase__factory, ah as ISendLib__factory, cq as ITreasuryFeeHandler, cr as ITreasuryFeeHandler__factory, cs as IUltraLightNode301, ct as IUltraLightNode301__factory, ai as IWorker, aj as IWorker__factory, ce as LzExecutor, cf as LzExecutor__factory, M as MessageLibBase, aw as MessageLibBase__factory, r as MessageLibManager, ax as MessageLibManager__factory, s as MessagingChannel, ay as MessagingChannel__factory, t as MessagingComposer, az as MessagingComposer__factory, u as MessagingContext, aA as MessagingContext__factory, d3 as MinEthersFactory, bS as MultiSig, bT as MultiSig__factory, cu as NonceContractMock, cv as NonceContractMock__factory, aV as OApp, aX as OAppCore, aY as OAppCore__factory, aR as OAppOptionsType3, aS as OAppOptionsType3__factory, bf as OAppPreCrimeSimulator, bg as OAppPreCrimeSimulator__factory, aZ as OAppReceiver, a_ as OAppReceiver__factory, a$ as OAppSender, b0 as OAppSender__factory, aW as OApp__factory, b3 as OFT, b5 as OFTAdapter, b6 as OFTAdapter__factory, b7 as OFTCore, b8 as OFTCore__factory, b4 as OFT__factory, aB as OmniCounter, aD as OmniCounterAbstract, aE as OmniCounterAbstract__factory, aF as OmniCounterPreCrime, aG as OmniCounterPreCrime__factory, aC as OmniCounter__factory, d2 as OnEvent, bK as OptimismDVNAdapterL1, bL as OptimismDVNAdapterL1__factory, bM as OptimismDVNAdapterL2, bN as OptimismDVNAdapterL2__factory, aT as OptionsBuilder, aU as OptionsBuilder__factory, P as PacketSentEvent, b as PacketSentEvent301, a as PacketVerifiedEvent, bh as PreCrime, b9 as PreCrimeE1, ba as PreCrimeE1__factory, bi as PreCrime__factory, v as PriceFeed, bj as PriceFeed__factory, d6 as PromiseOrValue, cW as ProxyAdmin, cX as ProxyAdmin__factory, cy as ReceiveLibBaseE1, cz as ReceiveLibBaseE1__factory, R as ReceiveLibBaseE2, bm as ReceiveLibBaseE2__factory, cA as ReceiveUln301, cE as ReceiveUln301View, cF as ReceiveUln301View__factory, cB as ReceiveUln301__factory, cM as ReceiveUln302, cQ as ReceiveUln302View, cR as ReceiveUln302View__factory, cN as ReceiveUln302__factory, cg as ReceiveUlnBase, ch as ReceiveUlnBase__factory, S as SendLibBase, cG as SendLibBaseE1, cH as SendLibBaseE1__factory, w as SendLibBaseE2, bo as SendLibBaseE2__factory, bn as SendLibBase__factory, cI as SendUln301, cJ as SendUln301__factory, cS as SendUln302, cT as SendUln302__factory, ci as SendUlnBase, cj as SendUlnBase__factory, au as SimpleMessageLib, av as SimpleMessageLib__factory, ao as Transfer, ap as Transfer__factory, bk as TransparentUpgradeableProxy, bl as TransparentUpgradeableProxy__factory, T as Treasury, cK as TreasuryFeeHandler, cL as TreasuryFeeHandler__factory, bp as Treasury__factory, c$ as TypedEvent, d0 as TypedEventFilter, d1 as TypedListener, cU as UlnBase, cV as UlnBase__factory, ca as UlnOptions, cb as UlnOptions__factory, W as Worker, cY as WorkerUpgradeable, cZ as WorkerUpgradeable__factory, c_ as Worker__factory, i as decompressor, x as factories, c as interfaces, d as libs, e as messagelib, f as oapp, g as oft, h as precrime, j as proxy, k as uln, l as upgradeable } from './index-ZpN8o3M8.js';
import 'ethers';
import '@ethersproject/providers';
import '@ethersproject/abi';

declare function getDeployedContractAddress(network: string, contractName: string): string;
declare function getDeploymentAddressAndAbi(network: string, contractName: string): {
    address: string;
    abi: any;
};

export { getDeployedContractAddress, getDeploymentAddressAndAbi };
