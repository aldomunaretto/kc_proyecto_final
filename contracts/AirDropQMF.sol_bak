// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./QMFTechToken.sol";
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";

contract AirDropQMF {
    NativeQMFTechToken public token;
    bytes32 public merkleRoot;

    mapping(address => bool) public claimed;

    constructor(address tokenAddress, bytes32 _merkleRoot) {
        token = NativeQMFTechToken(tokenAddress);
        merkleRoot = _merkleRoot;
    }

    function claim(bytes32[] calldata proof, uint256 amount) external {
        require(!claimed[msg.sender], "Already claimed");

        bytes32 leaf = keccak256(abi.encodePacked(msg.sender, amount));
        require(MerkleProof.verify(proof, merkleRoot, leaf), "Invalid proof");

        claimed[msg.sender] = true;
        token.transfer(msg.sender, amount);
    }
}